[gd_scene load_steps=23 format=3 uid="uid://b0wqe48ctiv16"]

[ext_resource type="Script" uid="uid://c2x87b7s57ykp" path="res://scripts/player_movement_controller.gd" id="1_3vyb7"]
[ext_resource type="Script" uid="uid://c7r5f43wpq8f7" path="res://scripts/player.gd" id="1_qlg0r"]
[ext_resource type="Script" uid="uid://gnlknj32j6df" path="res://scripts/camera_3d.gd" id="2_g2els"]
[ext_resource type="PackedScene" uid="uid://dx6320js5byu1" path="res://scenes/weapon.tscn" id="3_qhqgy"]
[ext_resource type="PackedScene" uid="uid://d3aiwdky5ljjx" path="res://scenes/ammo.tscn" id="3_ur7pv"]
[ext_resource type="PackedScene" uid="uid://bh388u70n6lsh" path="res://scenes/ammo_single.tscn" id="4_3v2ag"]
[ext_resource type="Script" uid="uid://sk8fglw1qtcm" path="res://scripts/shooting_controller.gd" id="4_dqkch"]
[ext_resource type="Script" uid="uid://cmwva2qha5p0" path="res://scripts/health_sprite.gd" id="5_d2wvv"]
[ext_resource type="Shader" uid="uid://cvgyuhtt27ehl" path="res://assets/shaders/pixelate.gdshader" id="6_tuyoq"]
[ext_resource type="AudioStream" uid="uid://c38scv4txnty2" path="res://assets/music/step2.ogg" id="7_fjrip"]
[ext_resource type="AudioStream" uid="uid://bblmiv31vprgn" path="res://assets/music/hero_death_scream2.ogg" id="8_smehm"]
[ext_resource type="Texture2D" uid="uid://wvbf6amjvra3" path="res://assets/health.png" id="10_y4r1p"]

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_u8vuu"]

[sub_resource type="CapsuleMesh" id="CapsuleMesh_g2els"]

[sub_resource type="AtlasTexture" id="AtlasTexture_ur7pv"]
atlas = ExtResource("10_y4r1p")
region = Rect2(1193, 0, 280, 515)

[sub_resource type="Animation" id="Animation_3v2ag"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(39, 495)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath(".:scale")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(1, 1)]
}

[sub_resource type="Animation" id="Animation_d2wvv"]
resource_name = "new_animation"
length = 0.5
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:position")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.133333, 0.233333, 0.333333, 0.433333),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1),
"update": 1,
"values": [Vector2(39, 495), Vector2(32.625, 488.53), Vector2(35.278, 498.571), Vector2(37.523, 485.989), Vector2(39, 495)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath(".:scale")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.167943, 0.5),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 0,
"values": [Vector2(1, 1), Vector2(1.13, 1.13), Vector2(1, 1)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_jej6c"]
_data = {
&"RESET": SubResource("Animation_3v2ag"),
&"new_animation": SubResource("Animation_d2wvv")
}

[sub_resource type="ShaderMaterial" id="ShaderMaterial_fjrip"]
shader = ExtResource("6_tuyoq")
shader_parameter/pixel_size = 2
shader_parameter/screen_size = Vector2(1280, 720)

[sub_resource type="Shader" id="Shader_smehm"]
code = "//SHADER ORIGINALY CREADED BY \"TimothyLottes\" FROM SHADERTOY
//PORTED AND MODIFYED TO GODOT BY AHOPNESS (@ahopness)
//LICENSE : CC0
//COMATIBLE WITH : GLES2, GLES3, WEBGL
//SHADERTOY LINK : https://www.shadertoy.com/view/MsjXzh

// PUBLIC DOMAIN CRT STYLED SCAN-LINE SHADER
//
//   by Timothy Lottes
//
// This is more along the style of a really good CGA arcade monitor.
// With RGB inputs instead of NTSC.
// The shadow mask example has the mask rotated 90 degrees for less chromatic aberration.
//
// Left it unoptimized to show the theory behind the algorithm.
//
// It is an example what I personally would want as a display option for pixel art games.
// Please take and use, change, or whatever.

shader_type canvas_item;

// Emulated input resolution.
uniform vec2 res;
uniform sampler2D SCREEN_TEXTURE : hint_screen_texture;
// Mask type
//  0 = Very compressed TV style shadow mask
//  1 = Stretched VGA style shadow mask (same as prior shaders)
//  2 = VGA style shadow mask 
uniform int mask_type :hint_range(0, 2) = 0;

// Bloom Type
//  0 = Normalized exposure
//  1 = Aditive bloom
//  2 = No Bloom
uniform int bloom_type :hint_range(0, 2) = 0;

// Hardness of scanline.
//  -8.0 = soft
// -16.0 = medium
uniform float hardScan :hint_range(-12.0, -1.0) = -8.0;

// Hardness of pixels in scanline.
// -2.0 = soft
// -4.0 = hard
uniform float hardPix :hint_range(-4.0, 0.0) = -2.0;

// Hardness of short vertical bloom.
//  -1.0 = wide to the point of clipping (bad)
//  -1.5 = wide
//  -4.0 = not very wide at all
uniform float hardBloomScan :hint_range(-4.0, 0.0) = -2.0;

// Hardness of short horizontal bloom.
//  -0.5 = wide to the point of clipping (bad)
//  -1.0 = wide
//  -2.0 = not very wide at all
uniform float hardBloomPix :hint_range(-2.0, 0.0) = -1.5;

// Amount of small bloom effect.
//  1.0/1.0 = only bloom
//  1.0/16.0 = what I think is a good amount of small bloom
//  0.0     = no bloom
uniform float bloomAmount :hint_range(1.0, 16.0) = 16.0;

// Display warp.
// 0.0 = none
// 1.0/8.0 = extreme
uniform vec2 warp = vec2(64.0, 24.0); 

// Amount of shadow mask.
uniform float maskDark  :hint_range(0.0, 1.0) = 0.5;
uniform float maskLight :hint_range(1.0, 2.0) = 1.5;

//------------------------------------------------------------------------

// sRGB to Linear.
// Assuing using sRGB typed textures this should not be needed.
float ToLinear1(float c){ return(c <= 0.04045) ? c / 12.92 : pow((c + 0.055) / 1.055, 2.4); }
vec3 ToLinear(vec3 c){ return vec3(ToLinear1(c.r), ToLinear1(c.g), ToLinear1(c.b)); }

// Linear to sRGB.
// Assuing using sRGB typed textures this should not be needed.
float ToSrgb1(float c){ return(c < 0.0031308?c * 12.92 : 1.055 * pow(c, 0.41666) - 0.055); }
vec3 ToSrgb(vec3 c){ return vec3(ToSrgb1(c.r), ToSrgb1(c.g), ToSrgb1(c.b)); }

// Nearest emulated sample given floating point position and texel offset.
// Also zero's off screen.
vec3 Fetch(vec2 pos, vec2 off, sampler2D iChannel0){
	pos = floor(pos * res + off) / res;
	
	if(max(abs(pos.x - 0.5), abs(pos.y - 0.5)) > 0.5){
		return vec3(0.0, 0.0, 0.0);
	}
	
	return ToLinear(texture(iChannel0 , pos.xy , -16.0).rgb);
}

// Distance in emulated pixels to nearest texel.
vec2 Dist(vec2 pos){ 
	pos = pos * res; 
	return - ((pos - floor(pos)) - vec2(0.5));
}
    
// 1D Gaussian.
float Gaus(float pos, float scale){ return exp2(scale * pos * pos); }

// 3-tap Gaussian filter along horz line.
vec3 Horz3(vec2 pos, float off, sampler2D iChannel0){
	vec3 b = Fetch(pos, vec2(-1.0, off), iChannel0);
	vec3 c = Fetch(pos, vec2( 0.0, off), iChannel0);
	vec3 d = Fetch(pos, vec2( 1.0, off), iChannel0);
	float dst = Dist(pos).x;
	
	// Convert distance to weight.
	float scale = hardPix;
	float wb = Gaus(dst - 1.0, scale);
	float wc = Gaus(dst + 0.0, scale);
	float wd = Gaus(dst + 1.0, scale);
	
	// Return filtered sample.
	return (b * wb + c * wc + d * wd) / (wb + wc + wd);
}
// 5-tap Gaussian filter along horz line.
vec3 Horz5(vec2 pos, float off, sampler2D iChannel0){
	vec3 a = Fetch(pos, vec2(-2.0, off), iChannel0);
	vec3 b = Fetch(pos, vec2(-1.0, off), iChannel0);
	vec3 c = Fetch(pos, vec2( 0.0, off), iChannel0);
	vec3 d = Fetch(pos, vec2( 1.0, off), iChannel0);
	vec3 e = Fetch(pos, vec2( 2.0, off), iChannel0);
	float dst = Dist(pos).x;
	
	// Convert distance to weight.
	float scale = hardPix;
	float wa = Gaus(dst - 2.0, scale);
	float wb = Gaus(dst - 1.0, scale);
	float wc = Gaus(dst + 0.0, scale);
	float wd = Gaus(dst + 1.0, scale);
	float we = Gaus(dst + 2.0, scale);
	
	// Return filtered sample.
	return (a * wa + b * wb + c * wc + d * wd + e * we) / (wa + wb + wc + wd + we);
}
// 7-tap Gaussian filter along horz line.
vec3 Horz7(vec2 pos, float off, sampler2D iChannel0){
	vec3 a = Fetch(pos, vec2(-3.0, off), iChannel0);
	vec3 b = Fetch(pos, vec2(-2.0, off), iChannel0);
	vec3 c = Fetch(pos, vec2( 1.0, off), iChannel0);
	vec3 d = Fetch(pos, vec2( 0.0, off), iChannel0);
	vec3 e = Fetch(pos, vec2( 1.0, off), iChannel0);
	vec3 f = Fetch(pos, vec2( 2.0, off), iChannel0);
	vec3 g = Fetch(pos, vec2( 3.0, off), iChannel0);
	float dst = Dist(pos).x;
	
	// Convert distance to weight.
	float scale = hardBloomPix;
	float wa = Gaus(dst - 3.0, scale);
	float wb = Gaus(dst - 2.0, scale);
	float wc = Gaus(dst - 1.0, scale);
	float wd = Gaus(dst + 0.0, scale);
	float we = Gaus(dst + 1.0, scale);
	float wf = Gaus(dst + 2.0, scale);
	float wg = Gaus(dst + 3.0, scale);
	
	// Return filtered sample.
	return (a * wa + b * wb + c * wc + d * wd + e * we + f * wf + g * wg) / (wa + wb + wc + wd + we + wf + wg);
}

// Return scanline weight.
float Scan(vec2 pos, float off){
	float dst = Dist(pos).y;
	
	return Gaus(dst + off, hardScan);
}

// Return scanline weight for bloom.
float BloomScan(vec2 pos, float off){
	float dst = Dist(pos).y;
	
	return Gaus(dst + off, hardBloomScan);
}

// Allow nearest three lines to effect pixel.
vec3 Tri(vec2 pos, sampler2D iChannel0){
	vec3 a = Horz3(pos,-1.0, iChannel0);
	vec3 b = Horz5(pos, 0.0, iChannel0);
	vec3 c = Horz3(pos, 1.0, iChannel0);
	
	float wa = Scan(pos,-1.0);
	float wb = Scan(pos, 0.0);
	float wc = Scan(pos, 1.0);
	
	return a * wa + b * wb + c * wc;
}

// Small bloom.
vec3 Bloom(vec2 pos, sampler2D iChannel0){
	vec3 a = Horz5(pos,-2.0, iChannel0);
	vec3 b = Horz7(pos,-1.0, iChannel0);
	vec3 c = Horz7(pos, 0.0, iChannel0);
	vec3 d = Horz7(pos, 1.0, iChannel0);
	vec3 e = Horz5(pos, 2.0, iChannel0);
	
	float wa = BloomScan(pos,-2.0);
	float wb = BloomScan(pos,-1.0);
	float wc = BloomScan(pos, 0.0);
	float wd = BloomScan(pos, 1.0);
	float we = BloomScan(pos, 2.0);
	
	return a * wa + b * wb + c * wc + d * wd + e * we;
}

// Distortion of scanlines, and end of screen alpha.
vec2 Warp(vec2 pos){
	pos = pos * 2.0 - 1.0;    
	pos *= vec2(1.0 + (pos.y * pos.y) * 1.0 / warp.x, 1.0 + (pos.x * pos.x) * 1.0/ warp.y);
	
	return pos * 0.5+0.5;
}

vec3 Mask(vec2 pos){
	if (mask_type == 0){
		float line = maskLight;
		float odd = 0.0;
		
		if(fract(pos.x / 6.0) < 0.5) odd = 1.0;
		if(fract((pos.y + odd) / 2.0) < 0.5) line = maskDark;  
		pos.x = fract(pos.x / 3.0);
		
		vec3 mask = vec3(maskDark, maskDark, maskDark);
		if(pos.x < 0.333)mask.r = maskLight;
		else if(pos.x < 0.666)mask.g = maskLight;
		else mask.b = maskLight;
		
		mask *= line;
		return mask;
	}else if (mask_type == 1){
		pos.x += pos.y * 3.0;
		
		vec3 mask = vec3(maskDark, maskDark, maskDark);
		pos.x = fract(pos.x / 6.0);
		if(pos.x < 0.333)mask.r = maskLight;
		else if(pos.x < 0.666)mask.g = maskLight;
		else mask.b = maskLight;
		
		return mask;
	}else if (mask_type == 2){
		pos.xy = floor(pos.xy * vec2(1.0, 0.5));
		pos.x += pos.y * 3.0;
		
		vec3 mask = vec3(maskDark, maskDark, maskDark);
		pos.x = fract(pos.x / 6.0);
		if(pos.x < 0.333)mask.r = maskLight;
		else if(pos.x < 0.666)mask.g = maskLight;
		else mask.b = maskLight;
	
		return mask;
	}
  }    

// Draw dividing bars.
float Bar(float pos, float bar){ pos -= bar; return pos * pos < 4.0 ? 0.0 : 1.0; }

// Entry.
void fragment(){
	vec2 pos = Warp(FRAGCOORD.xy / (1.0 / SCREEN_PIXEL_SIZE).xy);
	
	COLOR.rgb = Tri(pos, SCREEN_TEXTURE) * Mask(FRAGCOORD.xy);
	if (bloom_type == 0){ 
		COLOR.rgb = mix(COLOR.rgb,Bloom(pos, SCREEN_TEXTURE), 1.0 / bloomAmount);    
	}else if (bloom_type == 1){
		COLOR.rgb += Bloom(pos, SCREEN_TEXTURE) * 1.0 / bloomAmount;    
	} 
	
	COLOR.a = 1.0;  
	COLOR.rgb = ToSrgb(COLOR.rgb);
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ur7pv"]
shader = SubResource("Shader_smehm")
shader_parameter/res = Vector2(1280, 720)
shader_parameter/mask_type = 2
shader_parameter/bloom_type = 2
shader_parameter/hardScan = -11.144
shader_parameter/hardPix = -1.224
shader_parameter/hardBloomScan = -1.184
shader_parameter/hardBloomPix = -0.52
shader_parameter/bloomAmount = 16.0
shader_parameter/warp = Vector2(1280, 720)
shader_parameter/maskDark = 0.806
shader_parameter/maskLight = 2.0

[sub_resource type="GDScript" id="GDScript_smehm"]
script/source = "extends AudioStreamPlayer3D

func reload():
	pitch_scale = randf_range(0.8, 1.2)
	play()
"

[node name="Player" type="CharacterBody3D" node_paths=PackedStringArray("gun_place", "camera") groups=["PlayerGroup"]]
collision_layer = 9
collision_mask = 9
script = ExtResource("1_qlg0r")
gun_scene = ExtResource("3_qhqgy")
gun_place = NodePath("Camera3D/GunPlace")
camera = NodePath("Camera3D")
empty_ammo = ExtResource("3_ur7pv")
empty_ammo_signle = ExtResource("4_3v2ag")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
shape = SubResource("CapsuleShape3D_u8vuu")

[node name="MovementController" type="Node3D" parent="." node_paths=PackedStringArray("player", "camera")]
script = ExtResource("1_3vyb7")
player = NodePath("..")
camera = NodePath("../Camera3D")

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
mesh = SubResource("CapsuleMesh_g2els")

[node name="ShootingController" type="Node3D" parent="." node_paths=PackedStringArray("camera")]
script = ExtResource("4_dqkch")
camera = NodePath("../Camera3D")

[node name="Camera3D" type="Camera3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.2, 0)
fov = 65.0
script = ExtResource("2_g2els")

[node name="GunPlace" type="Node3D" parent="Camera3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.546504, -0.434494, -1.02701)

[node name="Health" type="TextureRect" parent="Camera3D" node_paths=PackedStringArray("player")]
visible = false
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -601.0
offset_top = 135.0
offset_right = -476.0
offset_bottom = 323.0
grow_horizontal = 2
grow_vertical = 2
texture = SubResource("AtlasTexture_ur7pv")
expand_mode = 1
script = ExtResource("5_d2wvv")
player = NodePath("../..")
first_x = 0.0
second_x = 296.0
third_x = 592.0
fourth_x = 888.0
fifth_x = 1193.0

[node name="AnimationPlayer" type="AnimationPlayer" parent="Camera3D/Health"]
libraries = {
&"": SubResource("AnimationLibrary_jej6c")
}

[node name="ColorRect" type="ColorRect" parent="Camera3D"]
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -5.0
offset_top = -5.0
offset_right = 5.0
offset_bottom = 5.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 1

[node name="ColorRect2" type="ColorRect" parent="Camera3D"]
visible = false
material = SubResource("ShaderMaterial_fjrip")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 1

[node name="ColorRect3" type="ColorRect" parent="Camera3D"]
material = SubResource("ShaderMaterial_ur7pv")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 1

[node name="Timer" type="Timer" parent="."]
wait_time = 20.0
autostart = true

[node name="AudioStreamPlayer3D" type="AudioStreamPlayer3D" parent="."]
stream = ExtResource("7_fjrip")
volume_db = -18.0
max_db = -2.0
script = SubResource("GDScript_smehm")

[node name="DeathSound" type="AudioStreamPlayer3D" parent="."]
stream = ExtResource("8_smehm")
unit_size = 5.0

[node name="DamageSound" type="AudioStreamPlayer3D" parent="."]
stream = ExtResource("8_smehm")
unit_size = 5.0

[connection signal="step" from="MovementController" to="AudioStreamPlayer3D" method="reload"]
[connection signal="timeout" from="Timer" to="." method="regenerate"]
